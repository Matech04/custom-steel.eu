---
const { lang } = Astro.params;

const { title1, title2, description, name, email, phone, button } = Astro.props;
---

<div id="contact" class="section">
  <h2>{title1}</h2>
  <hr />

  <div class="grid gap-8 xl:grid-cols-3 mt-20">
    <div class="flex flex-col gap-6 mb-10">
      <h3 class="text-3xl sm:text-4xl lg:text-3xl">{title2}</h3>
      <p class="text-xl sm:text-2xl lg:text-3xl xl:text-2xl xl:leading-12">
        {description}
      </p>
    </div>

    <form id="form" class="contact_form xl:col-span-2">
      <input name="name" placeholder={name} />
      <p id="name_error" class="error"></p>
      <input name="email" placeholder={email} />
      <p id="email_error" class="error"></p>
      <input name="phone" placeholder={phone} />
      <p id="phone_error" class="error"></p>
      <div class="relative">
        <textarea name="textarea"></textarea>
        <label
          class="absolute bottom-2 right-2 hover:cursor-pointer flex flex-row gap-2 items-center text-4xl font-bold"
        >
          <input
            class="hidden"
            type="file"
            accept=".png,.jpg,.avif.webp"
            multiple
            id="fileInput"
            name="images"
          />
          <p id="file_error" class="error text-base"></p>
          <p id="imageCounter"></p>
          <svg
            id="imageSvg"
            class="text-accent w-12 lg:w-16 2xl:w-18"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="m2.25 15.75 5.159-5.159a2.25 2.25 0 0 1 3.182 0l5.159 5.159m-1.5-1.5 1.409-1.409a2.25 2.25 0 0 1 3.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 0 0 1.5-1.5V6a1.5 1.5 0 0 0-1.5-1.5H3.75A1.5 1.5 0 0 0 2.25 6v12a1.5 1.5 0 0 0 1.5 1.5Zm10.5-11.25h.008v.008h-.008V8.25Zm.375 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Z"
            ></path>
          </svg>
        </label>
      </div>

      <button class="hover:cursor-pointer">
        <p>{button}</p>
        <svg
          width="22"
          height="21"
          viewBox="0 0 22 21"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M16.8253 0.609169C17.9411 0.410707 19.1135 0.42274 19.9874 1.29667C20.8608 2.17054 20.8734 3.34225 20.6749 4.4578C20.475 5.58156 19.9879 7.03268 19.3956 8.80936L17.5695 14.2889C17.0194 15.939 16.5835 17.251 16.171 18.1932C15.7877 19.0687 15.293 19.9637 14.4396 20.3504C13.579 20.74 12.5912 20.7399 11.7306 20.3504C10.8772 19.9638 10.3825 19.0687 9.99916 18.1932C9.58672 17.251 9.15074 15.9389 8.60072 14.2889C8.35575 13.5539 8.29541 13.4118 8.21986 13.3074C8.15228 13.2142 8.06982 13.1319 7.9767 13.0642C7.87228 12.9885 7.73115 12.9287 6.99525 12.6834C5.34501 12.1333 4.03225 11.6964 3.08998 11.284C2.21444 10.9006 1.31934 10.4059 0.932754 9.55253C0.543218 8.69198 0.543279 7.70509 0.932754 6.84452C1.31924 5.99085 2.2143 5.49647 3.08998 5.11308C4.03227 4.70057 5.34484 4.2638 6.99525 3.71366L12.4738 1.88749C14.2504 1.29529 15.7016 0.809117 16.8253 0.609169ZM18.4396 2.84452C18.357 2.76194 18.1442 2.59718 17.2091 2.76347C16.2816 2.92846 15.0136 3.34785 13.1662 3.96366L7.68764 5.79081C5.99368 6.35546 4.79648 6.75524 3.96791 7.11796C3.5577 7.29755 3.28848 7.44728 3.11537 7.57304C2.97276 7.67667 2.93284 7.73666 2.92689 7.74686C2.79709 8.03372 2.79703 8.36334 2.92689 8.65018C2.93363 8.6615 2.97456 8.72169 3.11537 8.82401C3.2885 8.94971 3.55798 9.09962 3.96791 9.27909C4.79647 9.64178 5.99387 10.0416 7.68764 10.6062C8.29082 10.8073 8.82033 10.9715 9.26186 11.2918C9.54188 11.495 9.78819 11.7422 9.99135 12.0223C10.3115 12.4638 10.4758 12.9932 10.6769 13.5965C11.2414 15.29 11.6414 16.4867 12.004 17.3152C12.1836 17.7254 12.3334 17.9957 12.4591 18.1687C12.5631 18.3118 12.6242 18.3506 12.6339 18.3562C12.9207 18.4859 13.2495 18.4861 13.5363 18.3562C13.5462 18.3505 13.6072 18.3117 13.7111 18.1687C13.8368 17.9956 13.9865 17.7256 14.1662 17.3152C14.5288 16.4867 14.9287 15.2901 15.4933 13.5965L17.3195 8.11698C17.9351 6.27002 18.3546 5.00242 18.5197 4.07499C18.6857 3.14172 18.5224 2.92753 18.4396 2.84452Z"
            fill="white"></path>
        </svg>
      </button>
    </form>
  </div>
</div>

<script>
  const translations = {
    pl: {
      "@": "Niepoprawny e-mail.",
      length: "Pole nie może być puste.",
      max: "Max 3 zdjęcia.",
      type: "Niepoprawny typ pliku",
      size: "Maksymalna wielkość zdjęcia to 5mb",
      text_long: "Maksymalnie 500 znaków",
    },
    en: {
      "@": "Invalid email.",
      length: "Field cannot be empty.",
      max: "Max 3 photos.",
      type: "Invalid file type.",
      size: "Maximum photo size is 5MB.",
      text_long: "Maximum 500 characters",
    },
    de: {
      "@": "Ungültige E-Mail.",
      length: "Feld darf nicht leer sein.",
      max: "Maximal 3 Fotos.",
      type: "Ungültiger Dateityp.",
      size: "Maximale Fotogröße beträgt 5 MB.",
      text_long: "Maximale 500 Charaktere",
    },
  };

  let lang = "pl";
  const url = window.location.href;
  const splited_url = url.split("/");

  if (splited_url.includes("pl")) {
    lang = "pl";
  } else if (splited_url.includes("de")) {
    lang = "de";
  } else if (splited_url.includes("en")) {
    lang = "en";
  }

  const maxSize = 5 * 1024 * 1024; // 5mb

  const fileInput = document.getElementById("fileInput");
  const svg = document.getElementById("imageSvg");
  const imageCounter = document.getElementById("imageCounter");

  fileInput?.addEventListener("change", () => {
    const fileCount = fileInput.files.length;

    console.log("Change");

    if (fileCount > 0) {
      svg.setAttribute("viewBox", "0 0 24 24");
      svg.setAttribute("fill", "currentColor");
      svg?.setAttribute("stroke", "1");
      svg.innerHTML = `<path fill-rule="evenodd" d="M1.5 6a2.25 2.25 0 0 1 2.25-2.25h16.5A2.25 2.25 0 0 1 22.5 6v12a2.25 2.25 0 0 1-2.25 2.25H3.75A2.25 2.25 0 0 1 1.5 18V6ZM3 16.06V18c0 .414.336.75.75.75h16.5A.75.75 0 0 0 21 18v-1.94l-2.69-2.689a1.5 1.5 0 0 0-2.12 0l-.88.879.97.97a.75.75 0 1 1-1.06 1.06l-5.16-5.159a1.5 1.5 0 0 0-2.12 0L3 16.061Zm10.125-7.81a1.125 1.125 0 1 1 2.25 0 1.125 1.125 0 0 1-2.25 0Z" clip-rule="evenodd" />`;
      imageCounter.innerText = fileCount;
    } else {
      svg.setAttribute("width", "22");
      svg.setAttribute("height", "21");
      svg.setAttribute("viewBox", "0 0 22 21");
      svg.setAttribute("fill", "none");
      svg.innerHTML = `<path stroke-linecap="round" stroke-linejoin="round" d="m2.25 15.75 5.159-5.159a2.25 2.25 0 0 1 3.182 0l5.159 5.159m-1.5-1.5 1.409-1.409a2.25 2.25 0 0 1 3.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 0 0 1.5-1.5V6a1.5 1.5 0 0 0-1.5-1.5H3.75A1.5 1.5 0 0 0 2.25 6v12a1.5 1.5 0 0 0 1.5 1.5Zm10.5-11.25h.008v.008h-.008V8.25Zm.375 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Z" />`;
    }
  });

  const form = document.getElementById("form");
  const name_error = document.getElementById("name_error");
  const email_error = document.getElementById("email_error");
  const phone_error = document.getElementById("phone_error");
  const file_error = document.getElementById("file_error");

  const errors = {
    name: name_error,
    email: email_error,
    phone: phone_error,
    file: file_error,
  };

  form?.addEventListener("submit", async (event) => {
    event.preventDefault();
    const formData = new FormData(form);
    formData.append("receiver", "mateusz.chodacki@gmail.com");
    formData.append("lang", lang);

    Object.entries(errors).forEach(([key, value]) => {
      value.textContent = "";
    });

    const files = fileInput.files;

    const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

    if (!formData.get("email").length) {
      errors.email.textContent = `${translations[lang]["length"]}`;
    } else if (!emailPattern.test(formData.get("email"))) {
      errors.email.textContent = `${translations[lang]["@"]}`;
    }

    if (!formData.get("name").length) {
      errors.name.textContent = `${translations[lang]["length"]}`;
    }

    if (!formData.get("phone").length) {
      errors.phone.textContent = `${translations[lang]["length"]}`;
    }

    if (formData.get("textarea").length > 1000) {
      errors.file.textContent = translations[lang]["text_long"];
    }

    if (files.length > 3) {
      errors.file.textContent = translations[lang]["max"];
    } else {
      for (const file of files) {
        if (!file.type.startsWith("image/")) {
          errors.file.textContent = translations[lang]["type"];
        } else if (file.size > maxSize) {
          errors.file.textContent = translations[lang]["size"];
        }
      }
    }

    let hasErrors = false;
    Object.entries(errors).forEach(([key, value]) => {
      if (hasErrors) return;
      if (value?.textContent != "") {
        hasErrors = true;
      }
    });

    if (!hasErrors) {
      try {
        const response = await fetch(
          "https://formmailer-production.up.railway.app/upload",
          {
            method: "POST",
            body: formData,
          }
        );

        if (!response.ok) {
          throw new Error(`Http error: ${response.status}`);
        }

        const result = await response.json();
        console.log(`Server response:`, result);
      } catch (error) {
        console.error(`Error: ${error}`);
      }
    }
  });
</script>
